Ext.data.JsonP.Config({"tagname":"class","name":"Config","autodetected":{},"files":[{"filename":"config.js","href":null}],"singleton":true,"members":[{"name":"create","tagname":"method","owner":"Config","id":"method-create","meta":{}},{"name":"load","tagname":"method","owner":"Config","id":"method-load","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Config","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-create' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Config'>Config</span><br/></div><a href='#!/api/Config-method-create' class='name expandable'>create</a>( <span class='pre'>source</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>create a config with multi objects. ...</div><div class='long'><p>create a config with multi objects.</p>\n\n<p>The latter object will overwrite the former recursively.</p>\n\n<pre class='inline-example '><code>create({a: 1, b: 2}, {a: 0, c: 3});  // =&gt; {a: 0, b: 2, c: 3}\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : Object...<div class='sub-desc'><p>a set of config objects.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The final config object.</p>\n</div></li></ul></div></div></div><div id='method-load' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Config'>Config</span><br/></div><a href='#!/api/Config-method-load' class='name expandable'>load</a>( <span class='pre'>fromPath, relativePaths</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Load your config files. ...</div><div class='long'><p>Load your config files.</p>\n\n<p>You could invoke the <code>load</code> function many times. Each returned config is independent and not affected by each other.</p>\n\n<pre class='inline-example '><code>// Assume that there are two files 'test/config/default.js', 'test/config/local.js',\n// and the codes in 'test/config/index.js':\nload(__dirname, ['default.js', 'local.js']);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fromPath</span> : String<div class='sub-desc'><p>A absolute path to sub-config folder.</p>\n</div></li><li><span class='pre'>relativePaths</span> : String[]<div class='sub-desc'><p>The paths of config files, which relative to <code>fromPath</code>.\n                                  The latter item will overwrite the former recursively.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The final config object.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Throw an error if the files of relativePaths are missing.\n        You could set <code>CONFIG_SP_LOAD_FILE_MISSING</code> environment variable for toleration</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});